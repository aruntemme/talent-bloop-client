@import "~bootstrap/scss/mixins/_breakpoints.scss";
@import "~bootstrap/scss/mixins/_gradients.scss";
@import "~bootstrap/scss/mixins/_box-shadow.scss";
@import "_variables.scss";

/* -------------------------------------------------------------------------- */

// Breakpoint viewport sizes and media queries.
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//  (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@include media-breakpoint-up($name: 'minimum width', $breakpoints: $grid-breakpoints);
// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@include media-breakpoint-down($name: 'maximum width', $breakpoints: $grid-breakpoints);
// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@include media-breakpoint-between($lower: 'min', $upper: 'max', $breakpoints: $grid-breakpoints);
// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@include media-breakpoint-only($name: 'smallest width', $breakpoints: $grid-breakpoints);

@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
  @if $enable-rounded {
    border-radius: $radius;
  }

  @else if $fallback-border-radius !=false {
    border-radius: $fallback-border-radius;
  }
}

@mixin box($x, $y) {
  width: $x;
  height: $y;
}

@mixin absolute-tl($t, $l) {
  position: absolute;
  top: $t;
  left: $l;
}

@mixin absolute-tr($t, $r) {
  position: absolute;
  top: $t;
  right: $r;
}

@mixin absolute-br($b, $r) {
  position: absolute;
  bottom: $b;
  right: $r;
}

@mixin absolute-bl($b, $l) {
  position: absolute;
  bottom: $b;
  left: $l;
}

@mixin box-shadow($color: 'rgba($black, 0.075)') {
  box-shadow: 0 0 0.3rem $color;
}

@mixin box-shadow-custom($values) {
  box-shadow: $values;
}

@mixin breakpoint($name) {
  @if map-has-key($grid-breakpoints, $name) {
    @media (min-width: map-get($grid-breakpoints, $name)) {
      @content;
    }
  }

  @else {
    @warn "Invalid breakpoint name `#{$name}`.";
  }
}
